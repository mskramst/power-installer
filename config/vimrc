"{{ http://www.github.com/mskramst }}
"{{ A customized vimrc file }}

syntax on
filetype indent on
set showmatch                                       "convenient for showing the matching braces"
set hidden                                          "allows for file buffers
set wildmenu                                        "creates a wild menu for toggling between files"
set path+=**                                        "sets path to current directory"
set colorcolumn=80                                  "Create a clear 80 char limit for coding"
set autoindent
set nu                                              "Display line numbers"
set relativenumber                                  "show line numbers and relative value for easy navigation"
set smartcase                                       "Helps with searching text set noswapfile
set undodir=~/.vim/undodir                          "Stores undohistory in undodirectory  for edited files for future sessions"
set undofile                                        "Turns on saving of undo/redo history"
set pumheight=7                                     "Limits number of suggestions in coc
set viminfo='20,<1000,s1000                         "prevents truncating yanks, deletes
set noerrorbells                                    "Turn off sound when errors made"
set belloff=all
set textwidth=80                                    "Set default settings for tabs, width, indent"
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set ruler
set wrapscan

set wildignore+=**/node_modules/**                  "ignore node_modules folder"

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"{{Plugins installed into Plugged folder}}
call plug#begin('~/.vim/plugged')

"{{The Basics}}
    Plug 'plasticboy/vim-markdown'                   "Allows for folding and collapsing of markdown files"
    "Plug 'jiangmiao/auto-pairs'                      "Create closing braces, parentheses etc."
    Plug 'sheerun/vim-polyglot'

"{{Productivity}}
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }  "Interactive file finder"
    Plug 'junegunn/fzf.vim'
    Plug 'mattn/emmet-vim'                           "Allows for Emmet commands (see https://docs.emmet.io/)"

"{{Pope Plugins}}
    Plug 'tpope/vim-fugitive'                        "Git functionality in VIM"
    Plug 'tpope/vim-surround'                        "Allows to change surround values (i.e. cs"' would swtich " to ''"

"{{Syntax Highlighting and Colors}}
    Plug 'morhetz/gruvbox'
    Plug 'vim-airline/vim-airline'                   "Creates bottom airline bar in vim"
    Plug 'vim-airline/vim-airline-themes'            "Allows for options for airline themes"

call plug#end()

if has('termguicolors')
  set termguicolors
endif

"{{Theming}}
colorscheme gruvbox 

let g:gruvbox_contrast_dark = 'medium'
let g:airline_theme = 'gruvbox'
let g:lightline = { 'colorscheme': 'gruvbox' }

"{{For dark version}}
set background=dark
set term=xterm

let mapleader = " "

"{{ Plug-in configurations }}
autocmd Filetype markdown let b:autopairs_enabled = 0
let g:vim_markdown_folding_disabled = 1
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
au FileType markdown setlocal foldlevel=99
let g:fzf_layout = { 'window': { 'width': 0.5, 'height': 0.3 } }
let $FZF_DEFAULT_OPTS='--reverse'

"{{Personal Quick Actions}}
nnoremap <leader>so :so %<CR>
nnoremap <leader>vim :e ~/.vim/vimrc<CR>
nnoremap <leader>term :bo term<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>gf :Files<CR>

"{{Git related commands}}
nmap <leader>gs :G<CR>
nmap <leader>gc :GCheckout<CR>
nmap <leader>gu :diffget //2<CR>
nmap <leader>gh :diffget //3<CR>
map <leader>code i```<CR><CR>```

"{{Split Navigation}}
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nnoremap <leader>o :on
nnoremap <leader>q :q

"{{ Abbreviations }}
abbr _SH #!/bin/bash

" Disable caps lock after leaving insert mode
au InsertLeave * call TurnOffCaps()

function TurnOffCaps()
    let capsState = matchstr(system('xset -q'), '00: Caps Lock:\s\+\zs\(on\|off\)\ze')
    if capsState == 'on'
        silent! execute ':!xdotool key Caps_Lock'
    endif
endfunction

